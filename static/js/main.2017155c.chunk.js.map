{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","utils/error-utils.ts","features/Login/login-reducer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","app/store.ts","features/Login/Login.tsx","app/App.tsx","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","error","setAppStatusAC","status","handleServerNetworkError","message","loginTC","createAsyncThunk","param","thunkAPI","a","res","resultCode","isLoggedIn","rejectWithValue","errors","fieldsErrors","undefined","logoutTC","clearDataAC","slice","createSlice","name","initialState","reducers","setIsLoggedInAC","state","action","payload","extraReducers","builder","addCase","fulfilled","loginReducer","reducer","actions","initializeAppTC","isInitialized","appReducer","fetchTodolistsTC","todolists","removeTodolistTC","changeTodolistEntityStatusAC","addTodolistTC","todolist","item","changeTodolistTitleTC","changeTodolistFilterAC","index","findIndex","tl","filter","entityStatus","map","splice","unshift","todolistsReducer","fetchTasks","tasks","items","removeTaskTC","addTaskTC","task","updateTaskTC","getState","find","t","apiModel","deadline","description","priority","startDate","forEach","todoListId","tasksReducer","AddItemForm","React","memo","addItem","disabled","useState","setTitle","setError","addItemHandler","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","changeTaskStatus","changeTaskTitle","removeTask","onClickHandler","useCallback","onChangeHandler","newIsDoneValue","checked","Completed","New","onTitleChangeHandler","newValue","className","Checkbox","Delete","Todolist","demo","addTask","changeTodolistTitle","changeFilter","addTaskinTodo","changeTodolistTitleInTodo","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolist","style","paddingTop","Button","TodolistsList","useSelector","login","useDispatch","useEffect","thunk","changeStatus","newTitle","addTodolist","Grid","container","padding","spacing","allTodolistTasks","Paper","to","Alert","forwardRef","ref","elevation","ErrorSnackbar","app","Snackbar","open","autoHideDuration","onClose","event","reason","severity","sx","width","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","window","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","test","onSubmit","formikHelpers","rejected","match","setFieldError","field","resetForm","justifyContent","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","touched","type","handleChange","handleBlur","FormControlLabel","control","App","AppBar","position","Toolbar","edge","Menu","Typography","LinearProgress","Container","fixed","path","element","top","textAlign","CircularProgress","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+JAqFYA,EAOAC,E,iCC9EGC,G,OAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,2DDPRQ,E,OAAWC,EAAMC,OAAO,CAC1BC,QAAS,gDACTC,iBAAiB,EACjBC,QAAS,CACL,UAAW,0CAKNC,EAAe,WAEpB,OAAON,EAASO,IAAoB,eAF/BD,EAAe,SAITE,GACX,OAAOR,EAASS,KAA6E,aAAc,CAACD,WALvGF,EAAe,SAOTI,GACX,OAAOV,EAASW,OAAT,qBAA4CD,KAR9CJ,EAAe,SAUTI,EAAYF,GACvB,OAAOR,EAASY,IAAT,qBAA2EF,GAAM,CAACF,WAXpFF,EAAe,SAafO,GACL,OAAOb,EAASO,IAAT,qBAA6CM,EAA7C,YAdFP,EAAe,SAgBbO,EAAoBC,GAC3B,OAAOd,EAASW,OAAT,qBAA4CE,EAA5C,kBAAgEC,KAjBlER,EAAe,SAmBbO,EAAoBL,GAC3B,OAAOR,EAASS,KAAT,qBAAgGI,EAAhG,UAAoH,CAACL,WApBvHF,EAAe,SAsBbO,EAAoBC,EAAgBC,GAC3C,OAAOf,EAASY,IAAT,qBAAiGC,EAAjG,kBAAqHC,GAAUC,IAKjIC,EAAU,SACbC,GACF,OAAOjB,EAASS,KAAuE,aAAcQ,IAFhGD,EAAU,WAKf,OAAOhB,EAASO,IAA0B,YALrCS,EAAU,WAQf,OAAOhB,EAASW,OAAqB,gB,SAsCjCtB,O,aAAAA,I,2BAAAA,I,yBAAAA,I,kBAAAA,M,cAOAC,O,aAAAA,I,mBAAAA,I,WAAAA,I,uBAAAA,I,kBAAAA,M,KEvFL,IAAM4B,EAAuB,SAAID,EAAuBE,GACvDF,EAAKG,SAASC,OACdF,EAASG,EAAc,CAACC,MAAMN,EAAKG,SAAS,MAE5CD,EAASG,EAAc,CAACC,MAAM,yBAElCJ,EAASK,EAAe,CAACC,OAAO,aAGvBC,EAA2B,SAACH,EAA4BJ,GACjEA,EAASG,EAAcC,EAAMI,QAAU,CAACJ,MAAOA,EAAMI,SAAW,CAACJ,MAAO,yBACxEJ,EAASK,EAAe,CAACC,OAAO,a,QCRvBG,EAAUC,YAEtB,aAFsC,uCAExB,WAAOC,EAAOC,GAAd,iBAAAC,EAAA,6DACXD,EAASZ,SAASK,EAAe,CAACC,OAAQ,aAD/B,kBAGWT,EAAcc,GAHzB,UAIqB,KADtBG,EAHC,QAIChB,KAAKiB,WAJN,wBAMHH,EAASZ,SAASK,EAAe,CAACC,OAAQ,eANvC,kBAOI,CAACU,YAAY,IAPjB,eASHjB,EAAqBe,EAAIhB,KAAMc,EAASZ,UATrC,kBAUIY,EAASK,gBAAgB,CAACC,OAAQJ,EAAIhB,KAAKG,SAAUkB,aAAcL,EAAIhB,KAAKqB,gBAVhF,iEAcDf,EAdC,KAgBPG,EAAyBH,EAAOQ,EAASZ,UAhBlC,kBAkBAY,EAASK,gBAAgB,CAACC,OAAQ,CAACd,EAAMI,SAAUW,kBAAcC,KAlBjE,0DAFwB,yDAuB1BC,EAAWX,YAAiB,cAAD,uCAAgB,WAAOC,EAAOC,GAAd,iBAAAC,EAAA,6DACpDD,EAASZ,SAASK,EAAe,CAACC,OAAQ,aADU,kBAG9BT,IAH8B,UAIpB,KADtBiB,EAH0C,QAIxChB,KAAKiB,WAJmC,wBAM5CH,EAASZ,SAASK,EAAe,CAACC,OAAQ,eAC1CM,EAASZ,SAASsB,KAP0B,kCAU5CvB,EAAqBe,EAAIhB,KAAMc,EAASZ,UAVI,kBAWpCY,EAASK,gBAAgB,KAXW,iEAe1Cb,EAf0C,KAgB5CG,EAAyBH,EAAOQ,EAASZ,UAhBG,kBAiBrCY,EAASK,gBAAgB,KAjBY,0DAAhB,yDAsBlCM,EAAQC,YAAY,CACtBC,KAAM,QACNC,aAAc,CACVV,YAAY,GAEhBW,SAAU,CACNC,gBADM,SACUC,EAAOC,GAEnBD,EAAMb,WAAac,EAAOC,QAAQf,aAI1CgB,cAAe,SAAAC,GACXA,EAAQC,QAAQzB,EAAQ0B,WAAW,SAACN,GAChCA,EAAMb,YAAa,KAEvBiB,EAAQC,QAAQb,EAASc,WAAW,SAACN,GACjCA,EAAMb,YAAa,QAKlBoB,EAAeb,EAAMc,QACpBT,EAAmBL,EAAMe,QAAzBV,gBCrEDW,EAAkB7B,YAAiB,oBAAD,uCAAsB,WAAOC,EAAP,sBAAAE,EAAA,6DAAeb,EAAf,EAAeA,UACvEK,EAAe,CAACC,OAAQ,aADgC,kBAG3CT,IAH2C,OAIjC,KADtBiB,EAHuD,QAIrDhB,KAAKiB,YACTf,EAAS4B,EAAgB,CAACZ,YAAY,KACtChB,EAASK,EAAe,CAACC,OAAQ,gBAEjCP,EAAqBe,EAAIhB,KAAME,GAR0B,gDAYvDI,EAZuD,KAa7DG,EAAyBH,EAAOJ,GAb6B,yDAAtB,yDAoBzCuB,EAAQC,YAAY,CACtBC,KAAM,MACNC,aAAc,CACVpB,OAAQ,OACRF,MAAO,GACPoC,eAAe,GAEnBb,SAAU,CACNtB,eADM,SACSwB,EAAOC,GAClBD,EAAMvB,OAASwB,EAAOC,QAAQzB,QAElCH,cAJM,SAIQ0B,EAAOC,GACG,KAAhBD,EAAMzB,QACNyB,EAAMzB,MAAQ0B,EAAOC,QAAQ3B,SAIzC4B,cAAe,SAAAC,GACXA,EAAQC,QAAQK,EAAgBJ,WAAW,SAACN,GACxCA,EAAMW,eAAgB,QAKrBC,EAAalB,EAAMc,QACzB,EAAwCd,EAAMe,QAAvCnC,EAAP,EAAOA,cAAeE,EAAtB,EAAsBA,eC7ChBqC,EAAmBhC,YAAiB,0BAAD,uCAC5C,WAAOC,EAAP,wBAAAE,EAAA,6DAAeb,EAAf,EAAeA,SAAUiB,EAAzB,EAAyBA,gBACrBjB,EAASK,EAAe,CAACC,OAAQ,aADrC,SAEsBnB,IAFtB,cAEU2B,EAFV,gBAIQd,EAASK,EAAe,CAACC,OAAQ,eAJzC,kBAKe,CAACqC,UAAW7B,EAAIhB,OAL/B,yCAUcM,EAVd,KAWQG,EAAyBH,EAAOJ,GAXxC,kBAYeiB,EAAgB,OAZ/B,0DAD4C,yDAgBnC2B,EAAmBlC,YAAiB,4BAAD,uCAC5C,WAAOhB,EAAP,sBAAAmB,EAAA,6DAA4Bb,EAA5B,EAA4BA,SAAUiB,EAAtC,EAAsCA,gBAClCjB,EAASK,EAAe,CAACC,OAAQ,aADrC,SAEsBnB,EAA4BO,GAFlD,8BAIQM,EAASK,EAAe,CAACC,OAAQ,eACjCN,EAAS6C,EAA6B,CAACtD,GAAIG,EAAYY,OAAQ,aALvE,kBAMe,CAACf,GAAIG,IANpB,yCAScU,EATd,KAUQG,EAAyBH,EAAOJ,GAVxC,kBAWeiB,EAAgB,OAX/B,0DAD4C,yDAenC6B,EAAgBpC,YAAiB,yBAAD,uCACzC,WAAOrB,EAAP,wBAAAwB,EAAA,6DAAuBb,EAAvB,EAAuBA,SAAUiB,EAAjC,EAAiCA,gBAC7BjB,EAASK,EAAe,CAACC,OAAQ,aADrC,SAEsBnB,EAA4BE,GAFlD,cAEUyB,EAFV,gBAKQd,EAASK,EAAe,CAACC,OAAO,eALxC,kBAMe,CAACyC,SAAUjC,EAAIhB,KAAKA,KAAKkD,OANxC,yCASc5C,EATd,KAUQG,EAAyBH,EAAOJ,GAVxC,kBAWeiB,EAAgB,OAX/B,0DADyC,yDAehCgC,EAAwBvC,YAAiB,iCAAD,uCACjD,WAAOC,EAAP,sBAAAE,EAAA,6DAA2Cb,EAA3C,EAA2CA,SAAUiB,EAArD,EAAqDA,gBACjDjB,EAASK,EAAe,CAACC,OAAQ,aADrC,SAEuBnB,EAA4BwB,EAAMpB,GAAIoB,EAAMtB,OAFnE,8BAIQW,EAASK,EAAe,CAACC,OAAO,eAJxC,kBAKe,CAACf,GAAIoB,EAAMpB,GAAIF,MAAOsB,EAAMtB,QAL3C,yCAQce,EARd,KASQG,EAAyBH,EAAOJ,GATxC,kBAUeiB,EAAgB,OAV/B,0DADiD,yDAiB/CM,EAAQC,YAAY,CACtBC,KAAM,YACNC,aAAc,GACdC,SAAS,CAiBLuB,uBAjBK,SAiBkBrB,EAAOC,GAC1B,IAAMqB,EAAQtB,EAAMuB,WAAU,SAAAC,GAAE,OAAIA,EAAG9D,KAAOuC,EAAOC,QAAQxC,MAC7DsC,EAAMsB,GAAOG,OAAQxB,EAAOC,QAAQuB,QAExCT,6BArBK,SAqBwBhB,EAAOC,GAChC,IAAMqB,EAAQtB,EAAMuB,WAAU,SAAAC,GAAE,OAAIA,EAAG9D,KAAOuC,EAAOC,QAAQxC,MAC7DsC,EAAMsB,GAAOI,aAAczB,EAAOC,QAAQzB,QAE9CgB,YAzBK,WA0BD,MAAO,KAGfU,cAAe,SAACC,GACZA,EAAQC,QAAQQ,EAAiBP,WAAW,SAACN,EAAOC,GAChD,OAAOA,EAAOC,QAAQY,UAAUa,KAAI,SAAAH,GAAE,kCAASA,GAAT,IAAaC,OAAQ,MAAOC,aAAc,eAEpFtB,EAAQC,QAAQU,EAAiBT,WAAW,SAACN,EAAOC,GAChD,IAAMqB,EAAQtB,EAAMuB,WAAU,SAAAC,GAAE,OAAIA,EAAG9D,KAAOuC,EAAOC,QAAQxC,MACzD4D,GAAS,GACTtB,EAAM4B,OAAON,EAAO,MAG5BlB,EAAQC,QAAQY,EAAcX,WAAW,SAACN,EAAOC,GAC7CD,EAAM6B,QAAN,2BAAkB5B,EAAOC,QAAQgB,UAAjC,IAA2CO,OAAQ,MAAOC,aAAc,aAE5EtB,EAAQC,QAAQe,EAAsBd,WAAW,SAACN,EAAOC,GACrD,IAAMqB,EAAQtB,EAAMuB,WAAU,SAAAC,GAAE,OAAIA,EAAG9D,KAAOuC,EAAOC,QAAQxC,MAC7DsC,EAAMsB,GAAO9D,MAAOyC,EAAOC,QAAQ1C,YAIlCsE,EAAmBpC,EAAMc,QAC/B,EAEwCd,EAAMe,QADjDY,EADG,EACHA,uBACAL,EAFG,EAEHA,6BAA6BvB,EAF1B,EAE0BA,Y,SClHpBsC,EAAalD,YAAiB,mBAAD,uCACtC,WAAOhB,EAAoBkB,GAA3B,iBAAAC,EAAA,6DACID,EAASZ,SAASK,EAAe,CAACC,OAAQ,aAD9C,SAEsBnB,EAAsBO,GAF5C,cAEUoB,EAFV,OAGU+C,EAAQ/C,EAAIhB,KAAKgE,MACvBlD,EAASZ,SAASK,EAAe,CAACC,OAAQ,eAJ9C,kBAKW,CAACuD,QAAOnE,eALnB,2CADsC,yDAQ7BqE,GAAerD,YAAiB,oBAAoB,SAACC,EAA+CC,GAE7G,OADAA,EAASZ,SAASK,EAAe,CAACC,OAAQ,aACnCnB,EAAwBwB,EAAMjB,WAAYiB,EAAMhB,QAClDpB,MAAK,SAAAuC,GACF,MAAO,CAACnB,OAAQgB,EAAMhB,OAAQD,WAAYiB,EAAMjB,kBAG/CsE,GAAYtD,YAAiB,kBAAD,uCAAoB,WAAOC,EAAP,0BAAAE,EAAA,6DACzDb,EADyD,EACzDA,SACAiB,EAFyD,EAEzDA,gBAEAjB,EAASK,EAAe,CAACC,OAAQ,aAJwB,kBAMnCnB,EAAwBwB,EAAMjB,WAAYiB,EAAMtB,OANb,UAOzB,KADtByB,EAN+C,QAO7ChB,KAAKiB,WAPwC,wBAQ3CkD,EAAOnD,EAAIhB,KAAKA,KAAKkD,KAC3BhD,EAASK,EAAe,CAACC,OAAQ,eATgB,kBAU1C2D,GAV0C,eAYjDlE,EAAqBe,EAAIhB,KAAME,GAZkB,kBAa1CiB,EAAgB,OAb0B,iEAgB/Cb,EAhB+C,KAiBrDG,EAAyBH,EAAOJ,GAjBqB,kBAkB9CiB,EAAgB,OAlB8B,0DAApB,yDAsB5BiD,GAAexD,YAAiB,qBAAD,uCACxC,WAAOC,EAAP,gCAAAE,EAAA,yDACIb,EADJ,EACIA,SACAiB,EAFJ,EAEIA,gBACAkD,EAHJ,EAGIA,SAEMtC,EAAQsC,IACRF,EAAOpC,EAAMgC,MAAMlD,EAAMjB,YAAY0E,MAAK,SAAAC,GAAC,OAAIA,EAAE9E,KAAOoB,EAAMhB,UANxE,yCAQesB,EAAgB,gCAR/B,cAWUqD,EAXV,aAYQC,SAAUN,EAAKM,SACfC,YAAaP,EAAKO,YAClBC,SAAUR,EAAKQ,SACfC,UAAWT,EAAKS,UAChBrF,MAAO4E,EAAK5E,MACZiB,OAAQ2D,EAAK3D,QACVK,EAAMf,OAlBjB,kBAsB0BT,EAAwBwB,EAAMjB,WAAYiB,EAAMhB,OAAQ2E,GAtBlF,UAuBoC,KADtBxD,EAtBd,QAuBgBhB,KAAKiB,WAvBrB,0CAwBmB,CAACpB,OAAQgB,EAAMhB,OAAQC,MAAO0E,EAAU5E,WAAYiB,EAAMjB,aAxB7E,eA2BYK,EAAqBe,EAAIhB,KAAME,GA3B3C,kBA4BmBiB,EAAgB,OA5BnC,iEA+Bcb,EA/Bd,KAgCQG,EAAyBH,EAAOJ,GAhCxC,kBAiCeiB,EAAgB,OAjC/B,0DADwC,yDAuCtCM,GAAQC,YAAY,CACtBC,KAAM,eACNC,aAAc,GACdC,SAAU,GAmBVK,cAAe,SAACC,GACZA,EAAQC,QAAQY,EAAcX,WAAW,SAACN,EAAOC,GAC7CD,EAAMC,EAAOC,QAAQgB,SAASxD,IAAM,MAExC0C,EAAQC,QAAQU,EAAiBT,WAAW,SAACN,EAAOC,UACzCD,EAAMC,EAAOC,QAAQxC,OAEhC0C,EAAQC,QAAQQ,EAAiBP,WAAW,SAACN,EAAOC,GAChDA,EAAOC,QAAQY,UAAUgC,SAAQ,SAACtB,GAC9BxB,EAAMwB,EAAG9D,IAAM,SAGvB0C,EAAQC,QAAQZ,GAAa,WACzB,MAAO,MAEXW,EAAQC,QAAQ0B,EAAWzB,WAAW,SAACN,EAAOC,GAC1CD,EAAMC,EAAOC,QAAQrC,YAAcoC,EAAOC,QAAQ8B,SAEtD5B,EAAQC,QAAQ6B,GAAa5B,WAAW,SAACN,EAAOC,GAC5C,IAAM+B,EAAQhC,EAAMC,EAAOC,QAAQrC,YAC7ByD,EAAQU,EAAMT,WAAU,SAAAiB,GAAC,OAAIA,EAAE9E,KAAOuC,EAAOC,QAAQpC,UACvDwD,GAAS,GAAGU,EAAMJ,OAAON,EAAO,MAExClB,EAAQC,QAAQ8B,GAAU7B,WAAW,SAACN,EAAOC,GAC3BD,EAAMC,EAAOC,QAAQ6C,YAC7BlB,QAAQ5B,EAAOC,YAEzBE,EAAQC,QAAQgC,GAAa/B,WAAW,SAACN,EAAOC,GAC5C,IAAM+B,EAAQhC,EAAMC,EAAOC,QAAQrC,YAC7ByD,EAAQU,EAAMT,WAAU,SAAAiB,GAAC,OAAIA,EAAE9E,KAAOuC,EAAOC,QAAQpC,UAC3DkE,EAAMV,GAAN,2BAAmBU,EAAMV,IAAWrB,EAAOC,QAAQnC,aAMlDiF,GAAetD,GAAMc,QAC3B,YAA6Cd,GAAMe,S,uECvI7CwC,GAAcC,IAAMC,MAAK,YAA8D,IAAnDC,EAAkD,EAAlDA,QAAkD,IAAzCC,gBAAyC,SAE/F,EAAwBC,mBAAS,IAAjC,oBAAK9F,EAAL,KAAY+F,EAAZ,KACA,EAAwBD,mBAAwB,MAAhD,oBAAK/E,EAAL,KAAYiF,EAAZ,KAEMC,EAAiB,WACE,KAAjBjG,EAAMkG,QACNN,EAAQ5F,GACR+F,EAAS,KAETC,EAAS,sBAiBjB,OAAO,iCACH,eAACG,GAAA,EAAD,CAAWC,QAAQ,WACRP,SAAUA,EACV9E,QAASA,EACTsF,MAAOrG,EACPsG,SAlBS,SAACC,GACrBR,EAASQ,EAAEC,cAAcH,QAkBdI,WAfW,SAACF,GACT,OAAVxF,GACAiF,EAAS,MAEM,KAAfO,EAAEG,UACFT,KAWOU,MAAM,QACNC,WAAY7F,IAEvB,eAAC8F,GAAA,EAAD,CAAYC,MAAM,UAAUC,QAASd,EAAgBJ,SAAUA,EAA/D,SACI,eAACmB,GAAA,EAAD,Y,SCxCCC,GAAevB,IAAMC,MAAK,SAAUuB,GAC7C,MAA8BpB,oBAAS,GAAvC,oBAAKqB,EAAL,KAAeC,EAAf,KACA,EAAwBtB,mBAASoB,EAAMb,OAAvC,oBAAKrG,EAAL,KAAY+F,EAAZ,KAcA,OAAOoB,EACD,eAAChB,GAAA,EAAD,CAAWE,MAAOrG,EAAOsG,SALX,SAACC,GACjBR,EAASQ,EAAEC,cAAcH,QAIyBgB,WAAS,EAACC,OATvC,WACrBF,GAAY,GACZF,EAAMZ,SAAStG,MAQb,uBAAMuH,cAda,WACrBH,GAAY,GACZrB,EAASmB,EAAMb,QAYb,SAAwCa,EAAMb,W,8BCZ3CmB,GAAO9B,IAAMC,MAAK,YAMuB,IALlBf,EAKiB,EALjBA,KACAvE,EAIiB,EAJjBA,WACAoH,EAGiB,EAHjBA,iBACAC,EAEiB,EAFjBA,gBACAC,EACiB,EADjBA,WAE1BC,EAAiBC,uBAAY,kBAAMF,EAAW/C,EAAK1E,GAAIG,KAAa,CAACuE,EAAK1E,GAAIG,EAAYsH,IAE1FG,EAAkBD,uBAAY,SAACtB,GACjC,IAAIwB,EAAiBxB,EAAEC,cAAcwB,QACrCP,EAAiB7C,EAAK1E,GAAI6H,EAAiBlJ,EAAaoJ,UAAYpJ,EAAaqJ,IAAK7H,KACvF,CAACuE,EAAK1E,GAAIG,EAAWoH,IAElBU,EAAuBN,uBAAY,SAACO,GACtCV,EAAgB9C,EAAK1E,GAAIkI,EAAU/H,KACpC,CAACuE,EAAK1E,GAAIG,EAAWqH,IAExB,OAAO,uBAAmBW,UAAWzD,EAAK3D,SAAWpC,EAAaoJ,UAAY,UAAY,GAAnF,UACH,eAACK,GAAA,EAAD,CACIN,QAASpD,EAAK3D,SAAWpC,EAAaoJ,UACtCnB,MAAM,UACNR,SAAUwB,IAGd,eAACb,GAAD,CAAcZ,MAAOzB,EAAK5E,MAAOsG,SAAU6B,IAC3C,eAACtB,GAAA,EAAD,CAAYE,QAASa,EAArB,SACI,eAACW,GAAA,EAAD,QATS3D,EAAK1E,O,sECTbsI,GAAW9C,IAAMC,MAAK,YAKoC,EALzB8C,KAK0B,IAJvBC,EAIsB,EAJtBA,QACAhF,EAGsB,EAHtBA,SACAiF,EAEsB,EAFtBA,oBACAC,EACsB,EADtBA,aACG1B,EAAmB,mBAE7D2B,EAAgBhB,uBAAY,SAAC7H,GAC/B0I,EAAQ1I,EAAO0D,EAASxD,MACzB,CAACwI,EAAShF,EAASxD,KAKhB4I,EAA4BjB,uBAAY,SAAC7H,GAC3C2I,EAAoBjF,EAASxD,GAAIF,KAClC,CAAC0D,EAASxD,GAAIyI,IAEXI,EAAoBlB,uBAAY,kBAAMe,EAAa,MAAOlF,EAASxD,MAAK,CAACwD,EAASxD,GAAI0I,IACtFI,EAAuBnB,uBAAY,kBAAMe,EAAa,SAAUlF,EAASxD,MAAK,CAACwD,EAASxD,GAAI0I,IAC5FK,EAA0BpB,uBAAY,kBAAMe,EAAa,YAAalF,EAASxD,MAAK,CAACwD,EAASxD,GAAI0I,IAGpGM,EAAmBhC,EAAM1C,MAS7B,MAPwB,WAApBd,EAASO,SACTiF,EAAmBhC,EAAM1C,MAAMP,QAAO,SAAAe,GAAC,OAAIA,EAAE/D,SAAWpC,EAAaqJ,QAEjD,cAApBxE,EAASO,SACTiF,EAAmBhC,EAAM1C,MAAMP,QAAO,SAAAe,GAAC,OAAIA,EAAE/D,SAAWpC,EAAaoJ,cAGlE,iCACH,gCAAI,eAAChB,GAAD,CAAcZ,MAAO3C,EAAS1D,MAAOsG,SAAUwC,IAC/C,eAACjC,GAAA,EAAD,CAAYE,QAvBG,WACnBG,EAAMiC,eAAezF,EAASxD,KAsBW2F,SAAoC,YAA1BnC,EAASQ,aAAxD,SACI,eAACqE,GAAA,EAAD,SAGR,eAAC9C,GAAD,CAAaG,QAASiD,EAAehD,SAAoC,YAA1BnC,EAASQ,eACxD,+BAEQgF,EAAiB/E,KAAI,SAAAa,GAAC,OAAI,eAACwC,GAAD,CAAiB5C,KAAMI,EAAG3E,WAAYqD,EAASxD,GACzCyH,WAAYT,EAAMS,WAClBD,gBAAiBR,EAAMQ,gBACvBD,iBAAkBP,EAAMO,kBAHnBzC,EAAE9E,SAO/C,uBAAKkJ,MAAO,CAACC,WAAY,QAAzB,UACI,eAACC,GAAA,EAAD,CAAQlD,QAA6B,QAApB1C,EAASO,OAAmB,WAAa,OAClD8C,QAASgC,EACTjC,MAAO,UAFf,iBAKA,eAACwC,GAAA,EAAD,CAAQlD,QAA6B,WAApB1C,EAASO,OAAsB,WAAa,OACrD8C,QAASiC,EACTlC,MAAO,UAFf,oBAIA,eAACwC,GAAA,EAAD,CAAQlD,QAA6B,cAApB1C,EAASO,OAAyB,WAAa,OACxD8C,QAASkC,EACTnC,MAAO,YAFf,gC,SCzDCyC,GAAqC,SAAC,GAAoB,IAAD,IAAlBd,YAAkB,SAC5DnF,EAAYkG,aAAyD,SAAAhH,GAAK,OAAIA,EAAMc,aACpFkB,EAAQgF,aAA8C,SAAAhH,GAAK,OAAIA,EAAMgC,SACrE7C,EAAa6H,aAAwC,SAAAhH,GAAK,OAAGA,EAAMiH,MAAM9H,cACzEhB,EAAW+I,cAEjBC,qBAAU,WACN,IAAIlB,GAAQ9G,EAAZ,CAGA,IAAMiI,EAAQvG,IACd1C,EAASiJ,MAEV,CAACjJ,IAGJ,IAAMgH,EAAaE,uBAAY,SAAUvH,EAAgBD,GACrD,IAAMuJ,EAAQlF,GAAa,CAACpE,SAAQD,eACpCM,EAASiJ,KACV,CAACjJ,IAEE+H,EAAUb,uBAAY,SAAU7H,EAAeK,GACjD,IAAMuJ,EAAQjF,GAAU,CAAC3E,QAAOK,eAChCM,EAASiJ,KACV,CAACjJ,IAEEkJ,EAAehC,uBAAY,SAAU3H,EAAYe,EAAsBZ,GACzE,IAAMuJ,EAAQ/E,GAAa,CAACvE,OAAQJ,EAAKK,MAAO,CAACU,UAAQZ,eACzDM,EAASiJ,KACV,CAACjJ,IAEE+G,EAAkBG,uBAAY,SAAU3H,EAAY4J,EAAkBzJ,GACxE,IAAMuJ,EAAQ/E,GAAa,CAACvE,OAAQJ,EAAIK,MAAO,CAACP,MAAO8J,GAAUzJ,eACjEM,EAASiJ,KACV,CAACjJ,IAEEiI,EAAef,uBAAY,SAAUxB,EAAyBhG,GAChE,IAAMoC,EAASoB,EAAuB,CAAC3D,GAAIG,EAAY4D,OAAQoC,IAC/D1F,EAAS8B,KACV,CAAC9B,IAEEwI,EAAiBtB,uBAAY,SAAU3H,GACzC,IAAM0J,EAAQrG,EAAiBrD,GAC/BS,EAASiJ,KACV,CAACjJ,IAEEgI,EAAsBd,uBAAY,SAAU3H,EAAYF,GAC1D,IAAM4J,EAAQhG,EAAsB,CAAC1D,KAAIF,UACzCW,EAASiJ,KACV,CAACjJ,IAEEoJ,EAAclC,uBAAY,SAAC7H,GAC7B,IAAM4J,EAAQnG,EAAczD,GAC5BW,EAASiJ,KACV,CAACjJ,IAEJ,OAAIgB,EAIG,uCACH,eAACqI,GAAA,EAAD,CAAMC,WAAS,EAACb,MAAO,CAACc,QAAS,QAAjC,SACI,eAACzE,GAAD,CAAaG,QAASmE,MAE1B,eAACC,GAAA,EAAD,CAAMC,WAAS,EAACE,QAAS,EAAzB,SAEQ7G,EAAUa,KAAI,SAAAH,GACV,IAAIoG,EAAmB5F,EAAMR,EAAG9D,IAEhC,OAAO,eAAC8J,GAAA,EAAD,CAAMrG,MAAI,EAAV,SACH,eAAC0G,GAAA,EAAD,CAAOjB,MAAO,CAACc,QAAS,QAAxB,SACI,eAAC1B,GAAD,CACI9E,SAAUM,EACVQ,MAAO4F,EACPzC,WAAYA,EACZiB,aAAcA,EACdF,QAASA,EACTjB,iBAAkBoC,EAClBV,eAAgBA,EAChBzB,gBAAiBA,EACjBiB,oBAAqBA,EACrBF,KAAMA,OAZKzE,EAAG9D,YAZ/B,eAAC,KAAD,CAAUoK,GAAI,Y,gFCxEvBC,GAAQ7E,IAAM8E,YAAuC,SACvDtD,EAAOuD,GACP,OAAO,eAAC,KAAD,aAAUC,UAAW,EAAGD,IAAKA,EAAKrE,QAAQ,UAAac,OAI3D,SAASyD,KAEZ,IAAM5J,EAAQyI,aAAsC,SAAAhH,GAAK,OAAIA,EAAMoI,IAAI7J,SAEjEJ,EAAW+I,cASjB,OACI,eAACmB,GAAA,EAAD,CAAUC,KAAgB,KAAV/J,EAAcgK,iBAAkB,IAAMC,QAAS,kBAAIrK,EAASG,EAAc,CAACC,MAAO,OAAlG,SACI,eAAC,GAAD,CAAOiK,QATK,SAACC,EAA8BC,GAChC,cAAXA,GAGJvK,EAASG,EAAc,CAACC,MAAO,OAKEoK,SAAS,QAAQC,GAAI,CAACC,MAAO,QAA1D,SACKtK,M,wEClBXuK,GAAcC,aAAgB,CAChC/G,MAAOgB,GACPlC,UAAWgB,EACXsG,IAAKxH,EACLqG,MAAO1G,IAIEyI,GAAQC,YAAe,CAChCzI,QAASsI,GACTI,WAAY,SAACC,GAAD,OACRA,IAAuBC,QAAQC,SAOvCC,OAAON,MAAQA,GAOR,ICbMO,GAAQ,WAGjB,IAAMpL,EDUuB+I,cCTvB/H,EAAa6H,aAAuC,SAAAhH,GAAK,OAAIA,EAAMiH,MAAM9H,cAG3EqK,EAASC,aAAU,CACnBC,cAAe,CACXC,MAAO,wBACPC,SAAU,WACVC,YAAY,GAEhBC,SAAU,SAACC,GACP,IAAM1K,EAAoD,GAW1D,OAVK0K,EAAOJ,MAEA,4CAA4CK,KAAKD,EAAOJ,SAChEtK,EAAOsK,MAAQ,yBAFftK,EAAOsK,MAAQ,WAIdI,EAAOH,SAEDG,EAAOH,SAASvL,OAAS,IAChCgB,EAAOuK,SAAW,gCAFlBvK,EAAOuK,SAAW,WAIfvK,GAEX4K,SAAS,WAAD,4BAAE,WAAOF,EAAwBG,GAA/B,qBAAAlL,EAAA,sEACeb,EAASS,EAAQmL,IADhC,OACA9J,EADA,OAGFrB,EAAQuL,SAASC,MAAMnK,IACvB,UAAIA,EAAOC,eAAX,iBAAI,EAAgBZ,oBAApB,OAAI,EAA8BjB,SACxBE,EAAQ0B,EAAOC,QAAQZ,aAAa,GAC1C4K,EAAcG,cAAc9L,EAAM+L,MAAO/L,EAAMA,QAGvDiL,EAAOe,YATD,2CAAF,qDAAC,KAqBb,OARApD,qBAAU,WACDhI,GAGLhB,EAAS0C,OAEV,IAEC1B,EACO,eAAC,KAAD,CAAU2I,GAAI,MAGlB,eAACN,GAAA,EAAD,CAAMC,WAAS,EAAC+C,eAAgB,SAAhC,SACH,eAAChD,GAAA,EAAD,CAAMrG,MAAI,EAACqJ,eAAgB,SAA3B,SACI,uBAAMP,SAAUT,EAAOiB,aAAvB,SACI,gBAACC,GAAA,EAAD,WACI,gBAACC,GAAA,EAAD,WACI,0DACI,oBAAGC,KAAM,wCACNC,OAAQ,SADX,sBAIJ,yEACA,2DACA,mDAEJ,gBAACC,GAAA,EAAD,WACI,eAACnH,GAAA,EAAD,aAAWQ,MAAM,QACN4G,OAAO,UACHvB,EAAOwB,cAAc,WAInCxB,EAAOyB,QAAQtB,OAASH,EAAOnK,OAAOsK,MACnC,sBAAK/C,MAAO,CAACtC,MAAO,OAApB,SAA6BkF,EAAOnK,OAAOsK,QAAe,KAC9D,eAAChG,GAAA,EAAD,CAAWuH,KAAK,WACL/G,MAAM,WACN4G,OAAO,SACPrN,GAAG,WACHkC,KAAM,WACNkE,SAAU0F,EAAO2B,aACjBtH,MAAO2F,EAAOO,OAAOH,SACrB9E,OAAQ0E,EAAO4B,aAEzB5B,EAAOyB,QAAQrB,UAAYJ,EAAOnK,OAAOuK,UAC1C,sBAAKhD,MAAO,CAACtC,MAAO,OAApB,SAA6BkF,EAAOnK,OAAOuK,WAC3C,eAACyB,GAAA,EAAD,CAAkBlH,MAAO,cACPmH,QAAS,eAACxF,GAAA,EAAD,eACD0D,EAAOwB,cAAc,kBAG/C,eAAClE,GAAA,EAAD,CAAQoE,KAAM,SAAUtH,QAAS,YAAaU,MAAO,UAArD,gC,UCzCTiH,OAjDf,YAAyC,IAAD,IAA1BtF,YAA0B,SAE9BxH,EAASuI,aAAiD,SAAChH,GAAD,OAAWA,EAAMoI,IAAI3J,UAC9EkC,EAAgBqG,aAAuC,SAAChH,GAAD,OAAWA,EAAMoI,IAAIzH,iBAC5ExB,EAAa6H,aAAuC,SAAChH,GAAD,OAAWA,EAAMiH,MAAM9H,cAC5EhB,EAAU+I,cAKhB,OAHAC,qBAAW,WACPhJ,EAASuC,OACV,CAACvC,IACAwC,EAWA,uBAAKkF,UAAU,MAAf,UACI,eAACsC,GAAD,IACA,gBAACqD,GAAA,EAAD,CAAQC,SAAS,SAAjB,UACI,gBAACC,GAAA,EAAD,WACI,eAACrH,GAAA,EAAD,CAAYsH,KAAK,QAAQrH,MAAM,UAAU,aAAW,OAApD,SACI,eAACsH,GAAA,EAAD,MAEJ,eAACC,GAAA,EAAD,CAAYjI,QAAQ,KAApB,kBAGCzE,GAAc,eAAC2H,GAAA,EAAD,CAAQxC,MAAM,UAAUC,QAfjC,WAClBpG,EAASqB,MAckB,uBAEP,YAAXf,GAAwB,eAACqN,GAAA,EAAD,OAE7B,eAACC,GAAA,EAAD,CAAWC,OAAK,EAAhB,SACG,gBAAC,KAAD,WACK,eAAC,KAAD,CAAOC,KAAK,IAAIC,QAAS,eAAC,GAAD,CAAejG,KAAMA,MAC/C,eAAC,KAAD,CAAOgG,KAAK,WAAWC,QAAS,eAAC,GAAD,CAAejG,KAAMA,MACpD,eAAC,KAAD,CAAOgG,KAAK,QAAQC,QAAS,eAAC,GAAD,MAC9B,eAAC,KAAD,CAAOD,KAAK,MAAMC,QAAS,wDAC5B,eAAC,KAAD,CAAOD,KAAK,KAAKC,QAAS,eAAC,KAAD,CAAUpE,GAAI,mBA9B1C,sBACJlB,MAAO,CAAC6E,SAAU,QAASU,IAAK,MAAOC,UAAW,SAAUvD,MAAO,QAD/D,SAEJ,eAACwD,GAAA,EAAD,O,SC9BZC,IAASC,OACL,eAAC,IAAMC,WAAP,UACI,eAAC,IAAD,CAAUxD,MAAOA,GAAjB,SACI,eAAC,KAAD,UACI,eAAC,GAAD,UAIZyD,SAASC,eAAe,SAM5BnQ,M","file":"static/js/main.2017155c.chunk.js","sourcesContent":["import axios, {AxiosResponse} from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'db794384-dee3-4cf5-8ceb-d18f4dd3b92a'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<LoginParamsType, AxiosResponse<ResponseType<{ userId: string }>>>('auth/login', data)\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<meType>>('auth/me')\r\n    },\r\n    logout(){\r\n        return instance.delete<ResponseType>('auth/login')\r\n    }\r\n}\r\n\r\n\r\n// types\r\nexport type LoginParamsType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe?: boolean,\r\n    captcha?: string\r\n}\r\n\r\nexport type meType ={\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type fieldErrorType={\r\n    field:string,\r\n    error: string\r\n}\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors?: Array<fieldErrorType>/*| Array<string>*/\r\n    data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from \"../app/app-reducer\";\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport { Dispatch } from \"redux\";\r\n\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error:data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error:'Some error occurred'}))\r\n    }\r\n    dispatch(setAppStatusAC({status:'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch) => {\r\n    dispatch(setAppErrorAC(error.message ? {error: error.message} : {error: 'Some error occurred'}))\r\n    dispatch(setAppStatusAC({status:'failed'}))\r\n}\r\n\r\n/*\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error: 'Some error occurred'}))\r\n    }\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppErrorAC({error: error.message ? error.message: 'Some error occurred'}))\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n*/\r\n","import {setAppStatusAC} from '../../app/app-reducer'\r\nimport {authAPI, fieldErrorType, LoginParamsType} from \"../../api/todolists-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {AxiosError} from \"axios\";\r\nimport {clearDataAC} from \"../TodolistsList/todolists-reducer\";\r\n\r\n\r\nexport const loginTC = createAsyncThunk<{ isLoggedIn: boolean }, LoginParamsType,\r\n    { rejectValue: { errors: Array<string>, fieldsErrors?: Array<fieldErrorType> } }>\r\n('auth/login', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.login(param)\r\n        if (res.data.resultCode === 0) {\r\n            //thunkAPI.dispatch(setIsLoggedInAC({value: true}))\r\n            thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return {isLoggedIn: true}\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch);\r\n            return thunkAPI.rejectWithValue({errors: res.data.messages, fieldsErrors: res.data.fieldsErrors})\r\n            // return {isLoggedIn: false}\r\n        }\r\n    } catch (er) {\r\n        const error = er as AxiosError\r\n\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        //return {isLoggedIn: false}\r\n        return thunkAPI.rejectWithValue({errors: [error.message], fieldsErrors: undefined})\r\n    }\r\n})\r\nexport const logoutTC = createAsyncThunk('auth/logout', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n   try {\r\n        const res = await authAPI.logout()\r\n        if (res.data.resultCode === 0) {\r\n            //thunkAPI.dispatch(setIsLoggedInAC({isLoggedIn: false}))\r\n            thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            thunkAPI.dispatch(clearDataAC())\r\n            return\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch)\r\n            return  thunkAPI.rejectWithValue({})\r\n        }\r\n    }\r\n    catch(er){\r\n        const error = er as AxiosError\r\n            handleServerNetworkError(error, thunkAPI.dispatch)\r\n           return  thunkAPI.rejectWithValue({})\r\n        }\r\n})\r\n\r\n\r\nconst slice = createSlice({\r\n    name: 'login',\r\n    initialState: {\r\n        isLoggedIn: false\r\n    },\r\n    reducers: {\r\n        setIsLoggedInAC(state, action: PayloadAction<{ isLoggedIn: boolean }>) {\r\n            //принимает черновик стейта и экшен. вместо кейсов создаем маленькие редьюссеры\r\n            state.isLoggedIn = action.payload.isLoggedIn\r\n        },\r\n\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(loginTC.fulfilled, (state) => {\r\n            state.isLoggedIn = true\r\n        });\r\n        builder.addCase(logoutTC.fulfilled, (state) => {\r\n            state.isLoggedIn = false\r\n        });\r\n    }\r\n});\r\n\r\nexport const loginReducer = slice.reducer\r\nexport const {setIsLoggedInAC} = slice.actions\r\n\r\n/*export const loginReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value} //immer js\r\n        default:\r\n            return state\r\n    }\r\n}*/\r\n// actions\r\n/*export const setIsLoggedInAC = (value: boolean) =>\r\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)*/\r\n\r\n// thunks\r\n/*export const _loginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC({status:'loading'}))\r\n    authAPI.login(data).then(res=> {\r\n        if (res.data.resultCode === 0 ){\r\n            dispatch(setIsLoggedInAC({isLoggedIn: true}))\r\n            dispatch(setAppStatusAC({status:'succeeded'}))\r\n        }else {\r\n            handleServerAppError(res.data, dispatch);\r\n        }\r\n    })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}*/\r\n/*\r\nexport const _logoutTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({isLoggedIn: false}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                dispatch(clearDataAC())\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n*/\r\n\r\n\r\n// types\r\n//type ActionsType = ReturnType<typeof setIsLoggedInAC> | any\r\n","import {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\nimport {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/todolists-api\";\r\nimport {setIsLoggedInAC} from \"../features/Login/login-reducer\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {AxiosError} from \"axios\";\r\n\r\nexport const initializeAppTC = createAsyncThunk('app/initializeApp', async (param, {dispatch}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    try{\r\n        const res = await authAPI.me()\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC({isLoggedIn: true}));\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    }\r\n    catch(er){\r\n        const error = er as AxiosError\r\n        handleServerNetworkError(error, dispatch)\r\n\r\n    }\r\n})\r\n\r\n\r\n//immer JS\r\nconst slice = createSlice({\r\n    name: 'APP',\r\n    initialState: {\r\n        status: 'idle',\r\n        error: '',\r\n        isInitialized: false\r\n    },\r\n    reducers: {\r\n        setAppStatusAC(state, action: PayloadAction<{ status: RequestStatusType }>) {\r\n            state.status = action.payload.status\r\n        },\r\n        setAppErrorAC(state, action: PayloadAction<{ error: string }>) {\r\n            if (state.error !== '') {\r\n                state.error = action.payload.error\r\n            }\r\n        },\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(initializeAppTC.fulfilled, (state) => {\r\n            state.isInitialized = true\r\n        });\r\n    }\r\n})\r\n\r\nexport const appReducer = slice.reducer;\r\nexport const {setAppErrorAC, setAppStatusAC} = slice.actions\r\n\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\n\r\n/*export const _initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me().then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC({isLoggedIn: true}));\r\n        } else {\r\n            handleServerAppError(res.data, dispatch);\r\n        }\r\n    })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n        .finally(() => dispatch(setIsInitializedAC({isInitialized: true})))\r\n}*/\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\n\r\n\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, setAppStatusAC} from '../../app/app-reducer'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {AxiosError} from \"axios\";\r\nimport {handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\nexport const fetchTodolistsTC = createAsyncThunk('todoList/fetchTodoLists',\r\n    async (param, {dispatch, rejectWithValue}) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        const res = await todolistsAPI.getTodolists()\r\n        try {\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return {todolists: res.data}\r\n\r\n            //return res.data.forEach(tl => dispatch(fetchTasks(tl.id)))\r\n        }\r\n        catch (er) {\r\n            const error = er as AxiosError\r\n            handleServerNetworkError(error, dispatch)\r\n            return rejectWithValue(null)\r\n        }\r\n    })\r\nexport const removeTodolistTC = createAsyncThunk('todoList/removeTodolistTC',\r\n    async (todolistId: string, {dispatch, rejectWithValue}) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        const res = await todolistsAPI.deleteTodolist(todolistId)\r\n        try {\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            dispatch(changeTodolistEntityStatusAC({id: todolistId, status: 'loading'}))\r\n            return {id: todolistId}\r\n        }\r\n        catch (er) {\r\n            const error = er as AxiosError\r\n            handleServerNetworkError(error, dispatch)\r\n            return rejectWithValue(null)\r\n        }\r\n    })\r\nexport const addTodolistTC = createAsyncThunk('todoList/addTodolistTC',\r\n    async (title: string, {dispatch, rejectWithValue}) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        const res = await todolistsAPI.createTodolist(title)\r\n        try {\r\n            //dispatch(addTodolistAC({todolist: res.data.data.item}))\r\n            dispatch(setAppStatusAC({status:'succeeded'}))\r\n            return {todolist: res.data.data.item}\r\n        }\r\n        catch (er) {\r\n            const error = er as AxiosError\r\n            handleServerNetworkError(error, dispatch)\r\n            return rejectWithValue(null)\r\n        }\r\n    })\r\nexport const changeTodolistTitleTC = createAsyncThunk('todoList/changeTodolistTitleTC',\r\n    async (param:{id: string, title: string}, {dispatch, rejectWithValue}) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        const res = await  todolistsAPI.updateTodolist(param.id, param.title)\r\n        try {\r\n            dispatch(setAppStatusAC({status:'succeeded'}))\r\n            return {id: param.id, title: param.title}\r\n        }\r\n        catch (er) {\r\n            const error = er as AxiosError\r\n            handleServerNetworkError(error, dispatch)\r\n            return rejectWithValue(null)\r\n        }\r\n    })\r\n\r\n\r\n\r\nconst slice = createSlice({\r\n    name: 'todolists',\r\n    initialState: [] as Array<TodolistDomainType>,\r\n    reducers:{\r\n        /*setTodolistsAC(state, action: PayloadAction<{ todolists: Array<TodolistType> }>){\r\n            return action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        },*/\r\n        /*removeTodolistAC(state, action: PayloadAction<{ id: string }>){\r\n            const index = state.findIndex(tl => tl.id === action.payload.id);\r\n            if (index > -1) {\r\n                state.splice(index, 1);\r\n            }\r\n        },*/\r\n        /*addTodolistAC(state, action: PayloadAction<{ todolist: TodolistType }>){\r\n            state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle',} )\r\n        },*/\r\n      /*  changeTodolistTitleAC(state, action: PayloadAction<{ id: string, title: string}>){\r\n            const index = state.findIndex(tl => tl.id === action.payload.id);\r\n            state[index].title =action.payload.title\r\n        },*/\r\n        changeTodolistFilterAC(state, action: PayloadAction<{ id: string, filter: FilterValuesType}>){\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].filter =action.payload.filter\r\n        },\r\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{ id: string, status: RequestStatusType}>){\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].entityStatus =action.payload.status\r\n        },\r\n        clearDataAC(){\r\n            return []\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(fetchTodolistsTC.fulfilled, (state, action) => {\r\n            return action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        });\r\n        builder.addCase(removeTodolistTC.fulfilled, (state, action) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id);\r\n            if (index > -1) {\r\n                state.splice(index, 1);\r\n            }\r\n        });\r\n        builder.addCase(addTodolistTC.fulfilled, (state, action) => {\r\n            state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle',} )\r\n        });\r\n        builder.addCase(changeTodolistTitleTC.fulfilled, (state, action) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id);\r\n            state[index].title =action.payload.title\r\n        });\r\n    }\r\n})\r\nexport const todolistsReducer = slice.reducer;\r\nexport const {\r\n    changeTodolistFilterAC,\r\n    changeTodolistEntityStatusAC,clearDataAC} =slice.actions;\r\n\r\n/*export const todolistsReducer2 = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        case \"CLEAR-TODOS\":\r\n            return  []\r\n        default:\r\n            return state\r\n    }\r\n}*/\r\n\r\n// actions\r\n/*export const removeTodolistAC2 = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC2 = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC2 = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC2 = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const changeTodolistEntityStatusAC2 = (id: string, status: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status } as const)\r\nexport const setTodolistsAC2 = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\nexport const clearDataAC2 =()=> ({type: 'CLEAR-TODOS'}) as const*/\r\n\r\n// thunks\r\n/*export const fetchTodolistsTC = ():AppThunk => {\r\n    return (dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC({todolists: res.data}))\r\n                dispatch(setAppStatusAC({status:'succeeded'}))\r\n                return res.data\r\n            })\r\n            .then( todo=> {\r\n                todo.forEach(tl=> dispatch(fetchTasks(tl.id)) )\r\n                }\r\n            )\r\n    }\r\n}*/\r\n/*export const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n        dispatch(setAppStatusAC({status:'loading'}))\r\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n        dispatch(changeTodolistEntityStatusAC({id: todolistId, status: 'loading'}))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC({id: todolistId}))\r\n                //скажем глобально приложению, что асинхронная операция завершена\r\n                dispatch(setAppStatusAC({status:'succeeded'}))\r\n            })\r\n    }\r\n}*/\r\n/*export const addTodolistTC = (title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status:'loading'}))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC({todolist: res.data.data.item}))\r\n                dispatch(setAppStatusAC({status:'succeeded'}))\r\n            })\r\n    }\r\n}*/\r\n/*\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC({id: id, title: title}))\r\n            })\r\n    }\r\n}\r\n*/\r\n\r\n\r\n\r\n// types\r\n\r\n/*export type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;*/\r\n/*export type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;*/\r\n\r\n\r\n\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\n","import {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppStatusAC} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\nimport {addTodolistTC, clearDataAC, fetchTodolistsTC, removeTodolistTC} from \"./todolists-reducer\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {AxiosError} from \"axios\";\r\n\r\n\r\nexport const fetchTasks = createAsyncThunk('tasks/fetchTasks',\r\n    async (todolistId: string, thunkAPI) => {\r\n        thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n        const res = await todolistsAPI.getTasks(todolistId)\r\n        const tasks = res.data.items\r\n        thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        return {tasks, todolistId}\r\n    })\r\nexport const removeTaskTC = createAsyncThunk('tasks/removeTask', (param: { taskId: string, todolistId: string }, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    return todolistsAPI.deleteTask(param.todolistId, param.taskId)\r\n        .then(res => {\r\n            return {taskId: param.taskId, todolistId: param.todolistId}\r\n        })\r\n})\r\nexport const addTaskTC = createAsyncThunk('tasks/addTaskTC', async (param: { title: string, todolistId: string }, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.createTask(param.todolistId, param.title)\r\n        if (res.data.resultCode === 0) {\r\n            const task = res.data.data.item\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return task\r\n        } else {\r\n            handleServerAppError(res.data, dispatch);\r\n            return rejectWithValue(null)\r\n        }\r\n    } catch (er) {\r\n        const error = er as AxiosError\r\n        handleServerNetworkError(error, dispatch)\r\n        return rejectWithValue(null)\r\n    }\r\n})\r\n\r\nexport const updateTaskTC = createAsyncThunk('tasks/updateTaskTC',\r\n    async (param: { taskId: string, model: UpdateDomainTaskModelType, todolistId: string }, {\r\n        dispatch,\r\n        rejectWithValue,\r\n        getState\r\n    }) => {\r\n        const state = getState() as AppRootStateType\r\n        const task = state.tasks[param.todolistId].find(t => t.id === param.taskId)\r\n        if (!task) {\r\n            return rejectWithValue(\"task not found in the state\");\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status ,\r\n            ...param.model\r\n        }\r\n\r\n        try {\r\n            const res = await todolistsAPI.updateTask(param.todolistId, param.taskId, apiModel)\r\n            if (res.data.resultCode === 0) {\r\n                return {taskId: param.taskId, model: apiModel, todolistId: param.todolistId}\r\n\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n                return rejectWithValue(null)\r\n            }\r\n        } catch (er) {\r\n            const error = er as AxiosError\r\n            handleServerNetworkError(error, dispatch)\r\n            return rejectWithValue(null)\r\n        }\r\n    })\r\n\r\n\r\nconst slice = createSlice({\r\n    name: 'tasksReducer',\r\n    initialState: {} as TasksStateType,\r\n    reducers: {\r\n        /*  removeTaskAC(state, action: PayloadAction<{ taskId: string, todolistId: string }>){\r\n              const tasks= state[action.payload.todolistId];\r\n              const index= tasks.findIndex(t=> t.id === action.payload.taskId);\r\n              tasks.splice(index, 1)\r\n          },*/\r\n        /*addTaskAC(state, action: PayloadAction<TaskType>) {\r\n            const tasks = state[action.payload.todoListId];\r\n            tasks.unshift(action.payload)\r\n        },*/\r\n        /*updateTaskAC(state, action: PayloadAction<{ taskId: string, model: UpdateDomainTaskModelType, todolistId: string }>) {\r\n            const tasks = state[action.payload.todolistId];\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId);\r\n            tasks[index] = {...tasks[index], ...action.payload.model}\r\n        },*/\r\n        /*   setTasksAC(state, action: PayloadAction<{tasks: Array<TaskType>, todolistId: string}>){\r\n               state[action.payload.todolistId]=action.payload.tasks\r\n           }*/\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTodolistTC.fulfilled, (state, action) => {\r\n            state[action.payload.todolist.id] = []\r\n        });\r\n        builder.addCase(removeTodolistTC.fulfilled, (state, action) => {\r\n            delete state[action.payload.id];\r\n        });\r\n        builder.addCase(fetchTodolistsTC.fulfilled, (state, action) => {\r\n            action.payload.todolists.forEach((tl: { id: string | number }) => {\r\n                state[tl.id] = []\r\n            })\r\n        });\r\n        builder.addCase(clearDataAC, () => {\r\n            return {}\r\n        });\r\n        builder.addCase(fetchTasks.fulfilled, (state, action) => {\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n        });\r\n        builder.addCase(removeTaskTC.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.todolistId];\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId);\r\n            if (index > -1) tasks.splice(index, 1)\r\n        });\r\n        builder.addCase(addTaskTC.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.todoListId];\r\n            tasks.unshift(action.payload)\r\n        });\r\n        builder.addCase(updateTaskTC.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.todolistId];\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId);\r\n            tasks[index] = {...tasks[index], ...action.payload.model}\r\n        });\r\n    }\r\n})\r\n\r\n\r\nexport const tasksReducer = slice.reducer;\r\nexport const {/*removeTaskAC,*/   /*setTasksAC*/} = slice.actions\r\n\r\n\r\n// thunks\r\n/*export const _fetchTasksTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status:'loading'}))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC({tasks, todolistId}))\r\n            dispatch(setAppStatusAC({status:'succeeded'}))\r\n        })\r\n}*/\r\n/*export const _removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<TaskActionsType>) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC({taskId, todolistId})\r\n            dispatch(action)\r\n        })\r\n}*/\r\n/*export const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}*/\r\n/*\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC({taskId, model: domainModel, todolistId})\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n*/\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\nexport type TaskActionsType = any\r\n\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { AddBox } from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemFormPropsType) {\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo(({\r\n                                    task,\r\n                                    todolistId,\r\n                                    changeTaskStatus,\r\n                                    changeTaskTitle,\r\n                                    removeTask\r\n                                }: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => removeTask(task.id, todolistId), [task.id, todolistId, removeTask]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        changeTaskStatus(task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, todolistId)\r\n    }, [task.id, todolistId,changeTaskStatus]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        changeTaskTitle(task.id, newValue, todolistId)\r\n    }, [task.id, todolistId,changeTaskTitle]);\r\n\r\n    return <div key={task.id} className={task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport {Delete} from '@mui/icons-material';\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\n\r\nexport type PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false,\r\n                                                 addTask,\r\n                                                 todolist,\r\n                                                 changeTodolistTitle,\r\n                                                 changeFilter,\r\n                                                 ...props}: PropsType) {\r\n\r\n    const addTaskinTodo = useCallback((title: string) => {\r\n        addTask(title, todolist.id)\r\n    }, [addTask, todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(todolist.id)\r\n    }\r\n    const changeTodolistTitleInTodo = useCallback((title: string) => {\r\n        changeTodolistTitle(todolist.id, title)\r\n    }, [todolist.id, changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => changeFilter('all', todolist.id), [todolist.id, changeFilter])\r\n    const onActiveClickHandler = useCallback(() => changeFilter('active', todolist.id), [todolist.id, changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => changeFilter('completed', todolist.id), [todolist.id, changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={todolist.title} onChange={changeTodolistTitleInTodo}/>\r\n            <IconButton onClick={removeTodolist} disabled={todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTaskinTodo} disabled={todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>( state=> state.login.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo|| !isLoggedIn) {\r\n            return; //оборвись, не читай код ниже\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [dispatch])\r\n\r\n\r\n    const removeTask = useCallback(function (taskId: string, todolistId: string) {\r\n        const thunk = removeTaskTC({taskId, todolistId})\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC({title, todolistId})\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC({taskId: id,  model: {status},todolistId })\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC({taskId: id, model: {title: newTitle},todolistId})\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC({id: todolistId, filter: value})\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC({id, title})\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    if(!isLoggedIn) {\r\n        return <Navigate to={'/login'} />\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React, {SyntheticEvent} from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from '../../app/store';\r\nimport { setAppErrorAC } from '../../app/app-reducer';\r\nimport {SnackbarCloseReason} from \"@mui/material/Snackbar/Snackbar\";\r\n\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, string>(state => state.app.error)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC({error: ''}))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== ''} autoHideDuration={6000} onClose={()=>dispatch(setAppErrorAC({error: ''}))}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n\r\n/*\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    //const [open, setOpen] = React.useState(true)\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event: React.SyntheticEvent<any,any> | Event, reason?: SnackbarCloseReason) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC({error: ''}));\r\n    }\r\n\r\n\r\n    const isOpen = error !== null;\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n*/\r\n","\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {combineReducers} from 'redux'\r\nimport thunkMiddleware, {ThunkAction} from 'redux-thunk'\r\nimport {appReducer} from './app-reducer'\r\nimport {loginReducer} from \"../features/Login/login-reducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {tasksReducer} from \"../features/TodolistsList/tasks-reducer\";\r\n\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    login: loginReducer\r\n})\r\n// непосредственно создаём store\r\n//export const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: (getDefaultMiddleware) =>\r\n        getDefaultMiddleware().prepend(thunkMiddleware),\r\n})\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\n\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n    ReturnType, AppRootStateType, unknown, any>\r\n\r\nexport type appDispatchType= typeof store.dispatch\r\nexport const useAppDispatch=()=> useDispatch<appDispatchType>()","import React, {useEffect} from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {FormikHelpers, FormikValues, useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"./login-reducer\";\r\nimport {appDispatchType, AppRootStateType, useAppDispatch} from \"../../app/store\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {LoginParamsType} from \"../../api/todolists-api\";\r\nimport {fetchTodolistsTC} from \"../TodolistsList/todolists-reducer\";\r\nimport {Simulate} from \"react-dom/test-utils\";\r\n\r\n\r\ntype FormValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n\r\n    //const dispatch: appDispatchType = useDispatch()\r\n    const dispatch = useAppDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\r\n\r\n\r\n    let formik = useFormik({\r\n        initialValues: {\r\n            email: '79027972026@yandex.ru',\r\n            password: '19051991',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: Partial<Omit<LoginParamsType, 'captcha'>> = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 6) {\r\n                errors.password = 'Must be 6 characters or more'\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: async (values: FormValuesType, formikHelpers: FormikHelpers<FormValuesType>) => {\r\n            const action = await dispatch(loginTC(values))\r\n\r\n            if (loginTC.rejected.match(action)) {\r\n                if (action.payload?.fieldsErrors?.length) {\r\n                    const error = action.payload.fieldsErrors[0]\r\n                    formikHelpers.setFieldError(error.field, error.error)\r\n                }\r\n            }\r\n            formik.resetForm()\r\n        }\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (!isLoggedIn) {\r\n            return\r\n        }\r\n        dispatch(fetchTodolistsTC())\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n\r\n    if (isLoggedIn) {\r\n        return <Navigate to={'/'}/>\r\n    }\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField label=\"Email\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps(\"email\")}\r\n                            /*onChange={formik.handleChange}\r\n                            value={formik.values.email}\r\n                 onBlur={formik.handleBlur}*//>\r\n                        {formik.touched.email && formik.errors.email ?\r\n                            <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\r\n                        <TextField type=\"password\"\r\n                                   label=\"Password\"\r\n                                   margin=\"normal\"\r\n                                   id=\"password\"\r\n                                   name={\"password\"}\r\n                                   onChange={formik.handleChange}\r\n                                   value={formik.values.password}\r\n                                   onBlur={formik.handleBlur}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password &&\r\n                        <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n                        <FormControlLabel label={'Remember me'}\r\n                                          control={<Checkbox\r\n                                              {...formik.getFieldProps(\"rememberMe\")}\r\n                                          />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </FormControl></form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n\r\n","import React, {useEffect} from 'react'\r\nimport './App.css'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\n\r\nimport {initializeAppTC, RequestStatusType} from './app-reducer'\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport {Menu} from '@mui/icons-material';\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {Navigate, Route, Routes} from \"react-router-dom\";\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {logoutTC} from \"../features/Login/login-reducer\";\r\nimport {CircularProgress} from \"@material-ui/core\";\r\nimport { AppRootStateType } from './store'\r\n\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status as RequestStatusType )\r\n    const  isInitialized=  useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\r\n    const  isLoggedIn=  useSelector<AppRootStateType, boolean>((state) => state.login.isLoggedIn)\r\n    const dispatch =useDispatch()\r\n\r\n    useEffect( ()=> {\r\n        dispatch(initializeAppTC())\r\n    }, [dispatch])\r\n    if(!isInitialized){\r\n         return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n    const onClickHendler =()=> {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                       ToDo\r\n                    </Typography>\r\n                    {isLoggedIn && <Button color=\"inherit\" onClick={onClickHendler}>Logout</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n               <Routes >\r\n                    <Route path='/' element={<TodolistsList demo={demo}/>} />\r\n                   <Route path='my-to-do' element={<TodolistsList demo={demo}/>} />\r\n                    <Route path='login' element={<Login />} />\r\n                   <Route path=\"404\" element={<h1>404: PAGE NOT FOUND</h1>}/>\r\n                  <Route path=\"/*\" element={<Navigate to={\"/404\"} />}/>\r\n                   {/*<Route path={`/${params}`} element={<Todolist demo={demo}/> }  />*/}\r\n                </Routes>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport App from './app/App';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './app/store';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <BrowserRouter>\r\n                <App/>\r\n            </BrowserRouter>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}